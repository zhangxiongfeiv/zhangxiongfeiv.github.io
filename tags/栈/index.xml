<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>栈 on 飞熊&#39;s blogs</title>
    <link>https://zhangxiongfeiv.github.io/tags/%E6%A0%88/</link>
    <description>Recent content in 栈 on 飞熊&#39;s blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Jun 2020 17:47:03 +0800</lastBuildDate>
    
	<atom:link href="https://zhangxiongfeiv.github.io/tags/%E6%A0%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>503.下一个更大元素II</title>
      <link>https://zhangxiongfeiv.github.io/post/503.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0ii/</link>
      <pubDate>Thu, 11 Jun 2020 17:47:03 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/503.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0ii/</guid>
      <description>503. 下一个更大元素 II 给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按</description>
    </item>
    
    <item>
      <title>团灭单调栈Next Great Element问题</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%8D%95%E8%B0%83%E6%A0%88%E8%A7%A3%E5%86%B3nextgreatelement%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 11 Jun 2020 17:03:20 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%8D%95%E8%B0%83%E6%A0%88%E8%A7%A3%E5%86%B3nextgreatelement%E9%97%AE%E9%A2%98/</guid>
      <description>单调栈 栈(stack) 是一种特殊的线性表，只能在一端进行操作。 往栈中添加元素，叫做push，入栈 从栈中移除元素，叫做pop，出栈 后进先出的原</description>
    </item>
    
    <item>
      <title>496.下一个更大元素I</title>
      <link>https://zhangxiongfeiv.github.io/post/496.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0i/</link>
      <pubDate>Thu, 11 Jun 2020 17:00:52 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/496.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0i/</guid>
      <description>496. 下一个更大元素 I 给定两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。 nums1 中数字 x 的下一个更</description>
    </item>
    
    <item>
      <title>739.每日温度</title>
      <link>https://zhangxiongfeiv.github.io/post/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</link>
      <pubDate>Thu, 11 Jun 2020 13:14:14 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</guid>
      <description>739. 每日温度 根据每日 气温 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0</description>
    </item>
    
    <item>
      <title>03.02栈的最小值</title>
      <link>https://zhangxiongfeiv.github.io/post/03.02%E6%A0%88%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/03.02%E6%A0%88%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</guid>
      <description>面试题 03.02. 栈的最小值 请设计一个栈，除了常规栈支持的pop与push函数以外，还支持min函数，该函数返回栈元素中的最小值。执行push、pop</description>
    </item>
    
    <item>
      <title>03.04化栈为队</title>
      <link>https://zhangxiongfeiv.github.io/post/03.04%E5%8C%96%E6%A0%88%E4%B8%BA%E9%98%9F/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/03.04%E5%8C%96%E6%A0%88%E4%B8%BA%E9%98%9F/</guid>
      <description>面试题 03.04. 化栈为队 实现一个MyQueue类，该类用两个栈来实现一个队列。 示例： MyQueue queue = new MyQueue(); queue.push(1); queue.push(2); queue.peek(); // 返回 1 queue.pop(); // 返回 1 queue.empty(); // 返回 false 说明： 你只能使用标准</description>
    </item>
    
    <item>
      <title>150. 逆波兰表达式求值</title>
      <link>https://zhangxiongfeiv.github.io/post/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</link>
      <pubDate>Wed, 11 Dec 2019 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</guid>
      <description>150. 逆波兰表达式求值 根据逆波兰表示法，求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除</description>
    </item>
    
    <item>
      <title>20. 有效的括号</title>
      <link>https://zhangxiongfeiv.github.io/post/20.-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Thu, 10 Oct 2019 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/20.-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>栈 栈是一种特殊的线性表,只能在一端操作 往栈中添加元素的操作，一般叫做push，入栈 从栈中移除元素的操作，一般叫做pop，出栈（只能移除栈顶元</description>
    </item>
    
    <item>
      <title>234.回文链表</title>
      <link>https://zhangxiongfeiv.github.io/post/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 26 Aug 2019 18:21:27 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid>
      <description>234. 回文链表 请判断一个链表是否为回文链表。 示例 1: 输入: 1-&amp;gt;2 输出: false 示例 2: 输入: 1-&amp;gt;2-&amp;gt;2-&amp;gt;1 输出: true 进阶： 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？ 来源：</description>
    </item>
    
    <item>
      <title>155. 最小栈</title>
      <link>https://zhangxiongfeiv.github.io/post/155.%E6%9C%80%E5%B0%8F%E6%A0%88/</link>
      <pubDate>Thu, 11 Apr 2019 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/155.%E6%9C%80%E5%B0%8F%E6%A0%88/</guid>
      <description>155. 最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) —— 将元素 x 推入栈中。 pop() —— 删除栈顶的元素。 top() —— 获取栈顶</description>
    </item>
    
    <item>
      <title>232. 用栈实现队列</title>
      <link>https://zhangxiongfeiv.github.io/post/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Thu, 11 Apr 2019 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>232. 用栈实现队列 使用栈实现队列的下列操作： push(x) &amp;ndash; 将一个元素放入队列的尾部。 pop() &amp;ndash; 从队列首部移除元素。 peek() &amp;ndash; 返回队列首部的元素。 empty() &amp;ndash; 返回队列是否为空。</description>
    </item>
    
  </channel>
</rss>