<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on API调用工程师的进阶</title>
    <link>https://zhxiongfei.github.io/tags/ios/</link>
    <description>Recent content in iOS on API调用工程师的进阶</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 21 Jul 2020 11:52:08 +0800</lastBuildDate>
    
	<atom:link href="https://zhxiongfei.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Responders and the Responder Chain to Handle Events</title>
      <link>https://zhxiongfei.github.io/post/using-responders-and-the-responder-chain-to-handle-events/</link>
      <pubDate>Tue, 21 Jul 2020 11:52:08 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/using-responders-and-the-responder-chain-to-handle-events/</guid>
      <description>Using Responders and the Responder Chain to Handle Events 原文地址 : Using Responders and the Responder Chain to Handle Events 使用响应者和响应链来处理事件 Learn how to handle events that propagate through your app. 了解如何处理应用事件的传递. Overview Apps receive and handle events using responder objects.</description>
    </item>
    
    <item>
      <title>原型模式,深拷贝,浅拷贝</title>
      <link>https://zhxiongfei.github.io/post/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Tue, 14 Jul 2020 11:54:29 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>原型模式 本文概念主要摘取书籍**《大话设计模式》**, ObjC的深浅拷贝主要是对**《苹果开发文档 》**相关内容的理解和翻译，以及写代码进行</description>
    </item>
    
    <item>
      <title>装饰器模式与ObjC的Category</title>
      <link>https://zhxiongfei.github.io/post/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E4%B8%8Eobjc%E7%9A%84category/</link>
      <pubDate>Mon, 13 Jul 2020 14:17:18 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E4%B8%8Eobjc%E7%9A%84category/</guid>
      <description>装饰器模式 装饰器模式(Decorator Pattern) 允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现</description>
    </item>
    
    <item>
      <title>享元模式与UITableViewCell复用机制</title>
      <link>https://zhxiongfei.github.io/post/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%E4%B8%8Euitableviewcell%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 08 Jul 2020 12:50:06 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%E4%B8%8Euitableviewcell%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6/</guid>
      <description>享元模式(Flyweight) 概念 享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型</description>
    </item>
    
    <item>
      <title>函数指针,block与lambda表达式</title>
      <link>https://zhxiongfei.github.io/post/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88block%E4%B8%8Elambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 07 Jul 2020 00:56:36 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88block%E4%B8%8Elambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>C语言中的函数指针, OjbC中的block,以及C++和Java中的lambda表达式非常类似. 在学习单个语言时不会想到他们之间的共通点和区</description>
    </item>
    
    <item>
      <title>一道有意思的考察block的面试题</title>
      <link>https://zhxiongfei.github.io/post/%E4%B8%80%E9%81%93%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E8%80%83%E5%AF%9Fblock%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 06 Jul 2020 22:25:46 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E4%B8%80%E9%81%93%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E8%80%83%E5%AF%9Fblock%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>有趣的面试经历 记得是 2018年底，去海淀区一家公司面试。 记得约的下午2点钟的面试，差不多中午那会就到达了即将面试的公司附近。 距离2点钟还早，</description>
    </item>
    
    <item>
      <title>模拟OjbC中抽象类的使用</title>
      <link>https://zhxiongfei.github.io/post/%E6%A8%A1%E6%8B%9Fojbc%E4%B8%AD%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 04 Jul 2020 17:57:39 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E6%A8%A1%E6%8B%9Fojbc%E4%B8%AD%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>抽象类 什么是抽象类? 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够</description>
    </item>
    
    <item>
      <title>iOS中内联函数的使用</title>
      <link>https://zhxiongfei.github.io/post/ios%E4%B8%AD%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 28 Jun 2020 14:03:20 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/ios%E4%B8%AD%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>内联函数(inline function) inline 使用 inline 修饰函数的声明或者实现，可以使其变为联函数 当函数被声明为内联函数之后, 编译器会将其内联展开, 而不是按通常的函</description>
    </item>
    
    <item>
      <title>Https为什么是安全的？</title>
      <link>https://zhxiongfei.github.io/post/https%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%89%E5%85%A8%E7%9A%84/</link>
      <pubDate>Mon, 08 Jun 2020 15:50:47 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/https%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%89%E5%85%A8%E7%9A%84/</guid>
      <description>姐妹篇 简单了解对称和非对称加密 单向散列函数 数字签名 CA数字证书 HTTPS HTTP 有以下安全性问题： 使用明文进行通信， 内容可能会被窃听 不验证通信方的身份，通</description>
    </item>
    
    <item>
      <title>iOS签名机制</title>
      <link>https://zhxiongfei.github.io/post/ios%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 05 Jun 2020 23:26:21 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/ios%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6/</guid>
      <description>姐妹篇 简单了解对称和非对称加密 单向散列函数 数字签名 CA数字证书 iOS签名机制 iOS签名机制的作用 保证安装到用户手机上的APP都是经过Appl</description>
    </item>
    
    <item>
      <title>CA数字证书</title>
      <link>https://zhxiongfei.github.io/post/ca%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Fri, 05 Jun 2020 01:51:42 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/ca%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</guid>
      <description>证书 证书，联想的是驾驶证、毕业证、英语四六级证等等，都是由权威机构认证的 密码学中的证书，全称叫公钥证书（Public-key Certific</description>
    </item>
    
    <item>
      <title>数字签名</title>
      <link>https://zhxiongfei.github.io/post/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Fri, 05 Jun 2020 01:01:20 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</guid>
      <description>想象以下场景 Alice发的内容有可能是被篡改的，或者有人伪装成Alice发消息，或者就是Alice发的，但她可以否认 问题来了：Bob如何确定</description>
    </item>
    
    <item>
      <title>单向散列函数</title>
      <link>https://zhxiongfei.github.io/post/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 04 Jun 2020 23:42:03 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</guid>
      <description>单向散列函数(One-way hash function) 概念 单向散列函数，又被称为消息摘要函数（message digest function），哈希函数 输出的散列值，也被称为消</description>
    </item>
    
    <item>
      <title>简单了解对称和非对称加密</title>
      <link>https://zhxiongfei.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E5%AF%B9%E7%A7%B0%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 04 Jun 2020 13:46:26 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E5%AF%B9%E7%A7%B0%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</guid>
      <description>学前须知 学习对称/非对称加密的主要目的是，学习iOS的签名机制. 我们简单的掌握一下，对称/非对称加密，常用算法，以及其原理，有助于我们理解签</description>
    </item>
    
    <item>
      <title>一个iOS小需求中对算法的优化</title>
      <link>https://zhxiongfei.github.io/post/%E4%B8%80%E4%B8%AAios%E5%B0%8F%E9%9C%80%E6%B1%82%E4%B8%AD%E5%AF%B9%E7%AE%97%E6%B3%95%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 26 May 2020 10:49:40 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/%E4%B8%80%E4%B8%AAios%E5%B0%8F%E9%9C%80%E6%B1%82%E4%B8%AD%E5%AF%B9%E7%AE%97%E6%B3%95%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>需求 最近接到一个小需求, 在一个feed流里, 展示商品列表，商品列表中数据都是一样的，只是展示上有主推的商品，需要大图展示, 其余商品小图展示。</description>
    </item>
    
    <item>
      <title>iOS组件化初试之创建私有库</title>
      <link>https://zhxiongfei.github.io/post/ios-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%88%9D%E8%AF%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E5%BA%93/</link>
      <pubDate>Thu, 07 May 2020 20:45:03 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/ios-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%88%9D%E8%AF%95%E4%B9%8B%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E5%BA%93/</guid>
      <description>iOS组件化初试之创建私有库 iOS组件的实现基本是基于cocoapods，如何利用cocoapod创建我们自己的私有库，是实现组件话的第一步</description>
    </item>
    
    <item>
      <title>NSObject内存结构</title>
      <link>https://zhxiongfei.github.io/post/nsobject%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 25 Jun 2018 17:24:50 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/nsobject%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>一，Objective-C的本质 我们平时编写的Objective-C代码，底层实现都是C/C++代码。 所以Objective-C的面向对象，</description>
    </item>
    
    <item>
      <title>Mac通过SSH登录iOS设备</title>
      <link>https://zhxiongfei.github.io/post/mac%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5ios%E8%AE%BE%E5%A4%87/</link>
      <pubDate>Fri, 01 Jun 2018 23:21:26 +0800</pubDate>
      
      <guid>https://zhxiongfei.github.io/post/mac%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5ios%E8%AE%BE%E5%A4%87/</guid>
      <description>本文非原创， 是在学习李明杰课程后的知识整理，方便自己复习，也给正好需要的伙伴提供方便。 基础概念 SSH 在学习Mac通过SSH登录iOS设备之前，我</description>
    </item>
    
  </channel>
</rss>