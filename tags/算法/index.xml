<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 飞熊&#39;s blogs</title>
    <link>https://zhangxiongfeiv.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 飞熊&#39;s blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Jun 2020 22:37:19 +0800</lastBuildDate>
    
	<atom:link href="https://zhangxiongfeiv.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode200题回顾与总结</title>
      <link>https://zhangxiongfeiv.github.io/post/leetcode200%E9%A2%98%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Thu, 28 May 2020 10:09:44 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/leetcode200%E9%A2%98%E5%9B%9E%E9%A1%BE/</guid>
      <description>2020.5.27总结 截止 5.27日，leetcode总刷题数到达200，写一篇文章以回顾，总结。 起因 非计算机专业出身的程序员, 经历过很多因</description>
    </item>
    
    <item>
      <title>二分应用之剑指Offer53在排序数组中查找数字I</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%88%86%E5%BA%94%E7%94%A8%E4%B9%8B%E5%89%91%E6%8C%87offer53%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97i/</link>
      <pubDate>Thu, 25 Jun 2020 22:37:19 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%88%86%E5%BA%94%E7%94%A8%E4%B9%8B%E5%89%91%E6%8C%87offer53%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97i/</guid>
      <description>剑指 Offer 53 - I. 在排序数组中查找数字 I 统计一个数字在排序数组中出现的次数。 示例 1: 输入: nums = [5,7,7,8,8,10], target = 8 输出: 2 示例 2: 输入: nums = [5,7,7,8,8,10], target = 6 输出: 0 限制：</description>
    </item>
    
    <item>
      <title>139.单词拆分</title>
      <link>https://zhangxiongfeiv.github.io/post/139.%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</link>
      <pubDate>Thu, 25 Jun 2020 10:35:24 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/139.%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</guid>
      <description>139. 单词拆分 给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。 说明： 拆</description>
    </item>
    
    <item>
      <title>数组代替HashMap提高效率的应用</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E7%BB%84%E4%BB%A3%E6%9B%BFhashmap%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 24 Jun 2020 16:48:53 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E7%BB%84%E4%BB%A3%E6%9B%BFhashmap%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>首先，我们看一道题目，用此题目为例说明，使用数组代替哈希表的使用 剑指 Offer 50. 第一个只出现一次的字符 在字符串 s 中找出第一个只出现一次的字符。如果没</description>
    </item>
    
    <item>
      <title>278.第一个错误版本</title>
      <link>https://zhangxiongfeiv.github.io/post/278.%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%89%88%E6%9C%AC/</link>
      <pubDate>Tue, 23 Jun 2020 10:10:30 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/278.%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%89%88%E6%9C%AC/</guid>
      <description>278.第一个错误版本 你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前</description>
    </item>
    
    <item>
      <title>团灭滑动窗口问题</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%9B%A2%E7%81%AD%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 18 Jun 2020 14:56:29 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%9B%A2%E7%81%AD%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%97%AE%E9%A2%98/</guid>
      <description>题外话 今天开始刷 LeetCode 探索频道, 字节跳动的题目，一道字符串相关的经典题目，无重复最长子串. 明明记得做过, 然而写完暴力法，在尝试进行时间复杂度优化</description>
    </item>
    
    <item>
      <title>1014.最佳观光组合</title>
      <link>https://zhangxiongfeiv.github.io/post/1014.%E6%9C%80%E4%BD%B3%E8%A7%82%E5%85%89%E7%BB%84%E5%90%88/</link>
      <pubDate>Thu, 18 Jun 2020 00:13:21 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/1014.%E6%9C%80%E4%BD%B3%E8%A7%82%E5%85%89%E7%BB%84%E5%90%88/</guid>
      <description>1014. 最佳观光组合 给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。 一对景点（i &amp;lt; j）组成的观光组合的得</description>
    </item>
    
    <item>
      <title>八皇后与回溯算法</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%85%AB%E7%9A%87%E5%90%8E%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 15 Jun 2020 21:10:05 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%85%AB%E7%9A%87%E5%90%8E%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
      <description>八皇后问题 首先我们了解一下著名的八皇后问题 八皇后问题，一个古老而著名的问题，是回溯算法的典型案例。该问题由国际西洋棋棋手马克斯·贝瑟尔于 1848 年</description>
    </item>
    
    <item>
      <title>数位dp.2的出现次数</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E4%BD%8Ddp.2%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Sun, 14 Jun 2020 14:08:38 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E4%BD%8Ddp.2%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</guid>
      <description>面试题 17.06. 2出现的次数 编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。 示例: 输入: 25 输出: 9 解释: (2, 12, 20, 21, 22, 23, 24, 25)(注意 22 应该算作两次</description>
    </item>
    
    <item>
      <title>739.每日温度</title>
      <link>https://zhangxiongfeiv.github.io/post/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</link>
      <pubDate>Thu, 11 Jun 2020 13:14:14 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</guid>
      <description>739. 每日温度 根据每日 气温 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0</description>
    </item>
    
    <item>
      <title>递归-汉诺塔问题</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%80%92%E5%BD%92-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jun 2020 16:40:17 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%80%92%E5%BD%92-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</guid>
      <description>面试题 08.06. 汉诺塔问题 在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第</description>
    </item>
    
    <item>
      <title>简单了解递归</title>
      <link>https://zhangxiongfeiv.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E9%80%92%E5%BD%92/</link>
      <pubDate>Wed, 10 Jun 2020 12:26:51 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E9%80%92%E5%BD%92/</guid>
      <description>递归(Recursion) 定义： 函数自身直接或间接调用自身，是一种常用的变成技巧。 生活中的递归现象： 从前有座山，山里有座庙，庙里有个老和尚，</description>
    </item>
    
    <item>
      <title>面试题46.把数字翻译成字符串</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%9846.%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 09 Jun 2020 23:01:15 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%9846.%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>面试题46.把数字翻译成字符串 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，</description>
    </item>
    
    <item>
      <title>剑指offer53.0-n-1中缺失的数字</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offer53.%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 05 Jun 2020 15:45:25 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offer53.%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>面试题53 - II. 0～n-1中缺失的数字 一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-</description>
    </item>
    
    <item>
      <title>剑指offer.60.n个骰子的点数</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offer.60.n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</link>
      <pubDate>Tue, 02 Jun 2020 21:52:35 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offer.60.n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</guid>
      <description>面试题60. n个骰子的点数 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。 你需要用一个浮点数数</description>
    </item>
    
    <item>
      <title>415.字符串相加</title>
      <link>https://zhangxiongfeiv.github.io/post/415.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Mon, 01 Jun 2020 22:23:54 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/415.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</guid>
      <description>415. 字符串相加 给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。 注意： num1 和num2 的长度都小于 5100. num1 和num2 都只包含数字 0-9. num1 和num2 都</description>
    </item>
    
    <item>
      <title>归并排序</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 31 May 2020 17:42:58 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>归并排序(merge sort) 于1945年，由冯诺伊曼提出首次提出 执行流程 不断地将数组平均分割成两个子序列, 直到不能再分割为止(只有一个元素) 不断地</description>
    </item>
    
    <item>
      <title>团灭丑数问题</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%9B%A2%E7%81%AD%E4%B8%91%E6%95%B0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 30 May 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%9B%A2%E7%81%AD%E4%B8%91%E6%95%B0%E9%97%AE%E9%A2%98/</guid>
      <description>什么是丑数？ 先看一下百度百科的解释: 说法一（ugly number）：把只包含质因子2，3和5的数称作丑数（Ugly Number）。例如6、8</description>
    </item>
    
    <item>
      <title>01.07旋转矩阵</title>
      <link>https://zhangxiongfeiv.github.io/post/01.07%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Thu, 28 May 2020 22:52:33 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/01.07%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/</guid>
      <description>面试题 01.07. 旋转矩阵 给你一幅由 N × N 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。 不占用额外内存空间能否做到？ 示</description>
    </item>
    
    <item>
      <title>一个iOS小需求中对算法的优化</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%B8%80%E4%B8%AAios%E5%B0%8F%E9%9C%80%E6%B1%82%E4%B8%AD%E5%AF%B9%E7%AE%97%E6%B3%95%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 26 May 2020 10:49:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%B8%80%E4%B8%AAios%E5%B0%8F%E9%9C%80%E6%B1%82%E4%B8%AD%E5%AF%B9%E7%AE%97%E6%B3%95%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>需求 最近接到一个小需求, 在一个feed流里, 展示商品列表，商品列表中数据都是一样的，只是展示上有主推的商品，需要大图展示, 其余商品小图展示。</description>
    </item>
    
    <item>
      <title>02.06回文链表</title>
      <link>https://zhangxiongfeiv.github.io/post/02.06%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/02.06%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid>
      <description>面试题 02.06. 回文链表 编写一个函数，检查输入的链表是否是回文的。 示例 1： 输入： 1-&amp;gt;2 输出： false 示例 2： 输入： 1-&amp;gt;2-&amp;gt;2-&amp;gt;1 输出： true 进阶： 你能否用 O(n) 时间复杂度和 O(1) 空间</description>
    </item>
    
    <item>
      <title>08.01三步问题</title>
      <link>https://zhangxiongfeiv.github.io/post/08.01%E4%B8%89%E6%AD%A5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/08.01%E4%B8%89%E6%AD%A5%E9%97%AE%E9%A2%98/</guid>
      <description>面试题 08.01. 三步问题 三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结</description>
    </item>
    
    <item>
      <title>08.03魔术索引</title>
      <link>https://zhangxiongfeiv.github.io/post/08.03%E9%AD%94%E6%9C%AF%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/08.03%E9%AD%94%E6%9C%AF%E7%B4%A2%E5%BC%95/</guid>
      <description>面试题 08.03. 魔术索引 魔术索引。 在数组A[0&amp;hellip;n-1]中，有所谓的魔术索引，满足条件A[i] = i。给定一个有序整数数组，编写一种方法</description>
    </item>
    
    <item>
      <title>10.01合并排序的数组</title>
      <link>https://zhangxiongfeiv.github.io/post/10.01%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/10.01%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E6%95%B0%E7%BB%84/</guid>
      <description>面试题 10.01. 合并排序的数组 给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。 初始化 A 和 B 的元素数</description>
    </item>
    
    <item>
      <title>16.17连续序列</title>
      <link>https://zhangxiongfeiv.github.io/post/16.17%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/16.17%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</guid>
      <description>面试题 16.17. 连续数列 给定一个整数数组，找出总和最大的连续数列，并返回总和。 示例： 输入： [-2,1,-3,4,-1,2,1,-5,4] 输出： 6 解释： 连续子数组 [4,-1,2,1] 的和最大，为 6。 进阶： 如果你已</description>
    </item>
    
    <item>
      <title>17.16按摩师</title>
      <link>https://zhangxiongfeiv.github.io/post/17.16%E6%8C%89%E6%91%A9%E5%B8%88/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/17.16%E6%8C%89%E6%91%A9%E5%B8%88/</guid>
      <description>面试题 17.16. 按摩师 一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约</description>
    </item>
    
    <item>
      <title>121买卖股票的最佳时机</title>
      <link>https://zhangxiongfeiv.github.io/post/121%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sat, 09 May 2020 21:40:52 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/121%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <description>121. 买卖股票的最佳时机 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一</description>
    </item>
    
    <item>
      <title>1143.最长公共子序列DP</title>
      <link>https://zhangxiongfeiv.github.io/post/1143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97dp/</link>
      <pubDate>Tue, 28 Apr 2020 18:10:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/1143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97dp/</guid>
      <description>1143. 最长公共子序列 给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。 一个字符串的 子序列 是指这样一个新的字符串：它是由原字符</description>
    </item>
    
    <item>
      <title>120三角形最小路径和DP</title>
      <link>https://zhangxiongfeiv.github.io/post/120%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8Cdp/</link>
      <pubDate>Tue, 28 Apr 2020 14:27:19 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/120%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8Cdp/</guid>
      <description>120. 三角形最小路径和 给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。 例如，给定三角形： [ [2], [3,4], [6,5,7], [4,1,8,3] ] 自顶向下的最</description>
    </item>
    
    <item>
      <title>300.最长上升子序列DP</title>
      <link>https://zhangxiongfeiv.github.io/post/300.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97dp/</link>
      <pubDate>Tue, 28 Apr 2020 11:25:21 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/300.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97dp/</guid>
      <description>300. 最长上升子序列 给定一个无序的整数数组，找到其中最长上升子序列的长度。 示例: 输入: [10,9,2,5,3,7,101,18] 输出: 4 解释: 最长的上升子序列是 [2,3,7,101]，</description>
    </item>
    
    <item>
      <title>213.打家劫舍DPII</title>
      <link>https://zhangxiongfeiv.github.io/post/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddpii/</link>
      <pubDate>Mon, 27 Apr 2020 22:08:29 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddpii/</guid>
      <description>213. 打家劫舍 II 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋</description>
    </item>
    
    <item>
      <title>198.打家劫舍DP</title>
      <link>https://zhangxiongfeiv.github.io/post/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddp/</link>
      <pubDate>Mon, 27 Apr 2020 21:06:09 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddp/</guid>
      <description>198. 打家劫舍 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如</description>
    </item>
    
    <item>
      <title>322.零钱找零DP</title>
      <link>https://zhangxiongfeiv.github.io/post/322.%E9%9B%B6%E9%92%B1%E6%89%BE%E9%9B%B6dp/</link>
      <pubDate>Mon, 27 Apr 2020 17:40:44 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/322.%E9%9B%B6%E9%92%B1%E6%89%BE%E9%9B%B6dp/</guid>
      <description>零钱兑换 给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总</description>
    </item>
    
    <item>
      <title>一文了解动态规划(Dynamic Programming)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 27 Apr 2020 10:20:11 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/</guid>
      <description>动态规划(Dynamic Programming) 简称 DP , 是求解最优化问题的一种常用策略。 来自维基百科的解释： Dynamic Programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once,and</description>
    </item>
    
    <item>
      <title>冒泡排序(BubbleSort)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 26 Apr 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>冒泡排序(BubbleSort) 执行流程 依次比较两个相邻元素如果前者比后者大，交换两者 一轮比较完毕，则最后一个元素为最大者 再进行第二轮比较，</description>
    </item>
    
    <item>
      <title>堆排序(Heap Sort)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%A0%86%E6%8E%92%E5%BA%8Fheap-sort/</link>
      <pubDate>Sun, 26 Apr 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%A0%86%E6%8E%92%E5%BA%8Fheap-sort/</guid>
      <description>堆排序(Heap Sort) 堆排序可以认为是选择排序的一种优化。 选择排序每一轮都在选择最大值 而选择最大值，最优的数据结构是堆 故用堆排序 优化 选择排序 执行</description>
    </item>
    
    <item>
      <title>快速排序(Quick Sort)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%BF%AB%E6%8E%92/</link>
      <pubDate>Sun, 26 Apr 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%BF%AB%E6%8E%92/</guid>
      <description>快速排序(Quick Sort) 快速排序(Quick Sort) 1960年由 查尔斯.安东尼.理查德.霍尔提出。 执行流程 随机选择一个为数列的轴点元素 遍历数组，把小</description>
    </item>
    
    <item>
      <title>插入排序(Insertion Sort)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8Finsertion-sort/</link>
      <pubDate>Sun, 26 Apr 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8Finsertion-sort/</guid>
      <description>插入排序(Insertion Sort) 执行流程 从第一位开始, 依次与之前元素比较 当比之前元素小时, 交换 挨个交换直到 末尾元素 最差时间复杂度 : O(N ^ 2) 平均时</description>
    </item>
    
    <item>
      <title>选择排序(Selection Sort)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 26 Apr 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>选择排序(Selection Sort) 执行流程 找出数组中最大的那个元素，和数组末尾元素进行叫魂 执行完一轮后，数组末尾的元素就是最大元素 依次找出剩余元</description>
    </item>
    
    <item>
      <title>数据结构学习 --&gt; 算法评判标准</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Wed, 08 Apr 2020 17:33:35 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>首先看一到leetcode题目:斐波那契数列。 509. 斐波那契数 斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每</description>
    </item>
    
    <item>
      <title>152. 乘积最大子数组</title>
      <link>https://zhangxiongfeiv.github.io/post/152.-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 09 Dec 2019 21:40:02 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/152.-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>152. 乘积最大子数组 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字）。 示例 1: 输入: [2,3,-2,4] 输出: 6 解释: 子数组 [2,3] 有</description>
    </item>
    
    <item>
      <title>53. 最大子序和DP</title>
      <link>https://zhangxiongfeiv.github.io/post/53.-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8Cdp/</link>
      <pubDate>Wed, 28 Aug 2019 20:56:35 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/53.-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8Cdp/</guid>
      <description>53. 最大子序和 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 示例: 输入: [-2,1,-3,4,-1,2,1,-5,4], 输出: 6 解释: 连续子数</description>
    </item>
    
    <item>
      <title>字符串常用算法 --&gt; 双指针</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 05 Apr 2019 20:52:54 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description>151. 翻转字符串里的单词 题目 给定一个字符串，逐个反转字符串中的每个单词 示例 1： 1 2 输入: &amp;#34;the sky is blue&amp;#34; 输出: &amp;#34;blue is sky the&amp;#34; 说明： 无空格字符构成一个单词。 输入</description>
    </item>
    
  </channel>
</rss>