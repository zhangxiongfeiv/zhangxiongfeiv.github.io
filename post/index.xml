<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 张雄飞的博客</title>
    <link>https://zhangxiongfeiv.github.io/post/</link>
    <description>Recent content in Posts on 张雄飞的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 12 May 2020 22:31:36 +0800</lastBuildDate>
    
	<atom:link href="https://zhangxiongfeiv.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode面试题集锦</title>
      <link>https://zhangxiongfeiv.github.io/post/leetcode%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6/</link>
      <pubDate>Tue, 12 May 2020 22:31:36 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/leetcode%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6/</guid>
      <description>leetcode上面试题目集合 面试题 01.01. 判定字符是否唯一 实现一个算法，确定一个字符串 s 的所有字符是否全都不同。 示例 1： 输入: s = &amp;ldquo;leetcode&amp;rdquo; 输出: false 示例 2： 输入: s = &amp;ldquo;abc&amp;rdquo; 输出: true 限制： 0 &amp;lt;= len(s) &amp;lt;= 100 如果你不使用额外的数据结构，会很加分。 来源：力扣（LeetCode） 链接：https://leetc</description>
    </item>
    
    <item>
      <title>AVL树</title>
      <link>https://zhangxiongfeiv.github.io/post/AVL%E6%A0%91/</link>
      <pubDate>Mon, 11 May 2020 21:04:44 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/AVL%E6%A0%91/</guid>
      <description>AVL树 平衡因子(Balance Factor): 某节点左右子树的高度差 AVL树的特点 每个节点的平衡因子只可能是1, 0, -1(绝对值 &amp;lt;= 1, 如果超过1，称之为 &amp;ldquo;失衡&amp;rdquo;) 每个节点的左右子树高度差不超过1 搜索， 添加， 删除的时间复杂度是 O(log N)</description>
    </item>
    
    <item>
      <title>平衡二叉搜索树</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Mon, 11 May 2020 21:03:47 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>平衡二叉搜索树 (BBST) 二叉搜索树(BST)的缺陷？ 二叉搜索树，在某种情况下会导致极度的不平衡，导致时间复杂度剧增。 如图，如果按照 7 4 9 2 5 8 11 的顺序添加节点 如果按照从小到大的顺序添加节点 二叉树退化成链表 如何改进BST？ 有没有办法防止二叉搜索树退化成链表？ 让添加，删除，搜索的复杂度维持在</description>
    </item>
    
    <item>
      <title>买卖股票的最佳时机</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sat, 09 May 2020 21:40:52 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <description>买卖股票的最佳时机 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。 注意：你不能在买入股票前卖出股票。 示例 1: 输入: [7,1,5,3,6,4] 输出: 5 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（</description>
    </item>
    
    <item>
      <title>乘积最大子数组</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 09 May 2020 21:40:02 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>152. 乘积最大子数组 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字）。 示例 1: 输入: [2,3,-2,4] 输出: 6 解释: 子数组 [2,3] 有最大乘积 6。 示例 2: 输入: [-2,0,-1] 输出: 0 解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。 来源：力扣（LeetCode） 链接：https://leetcode-</description>
    </item>
    
    <item>
      <title>二叉搜索树</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Sat, 09 May 2020 21:35:41 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>思考？ 在 n 个动态的整数中搜索某个整数？ (查看其是否存在) 假设用动态数组存放元素，从第0个位置开始遍历搜索，平均时间复杂度 O(N) 如果维护一个有序的动态数组，使用二分搜索，最坏时间复杂度 O(log N) 但是添加，删除的平均时间复杂度是 O(N) 针对这个需求， 有没有更好的方案？ 使用二叉搜索树，添加/删除/搜索</description>
    </item>
    
    <item>
      <title>IOS基于码云创建私有库</title>
      <link>https://zhangxiongfeiv.github.io/post/iOS%E5%9F%BA%E4%BA%8E%E7%A0%81%E4%BA%91%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E5%BA%93/</link>
      <pubDate>Thu, 07 May 2020 20:45:03 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/iOS%E5%9F%BA%E4%BA%8E%E7%A0%81%E4%BA%91%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E5%BA%93/</guid>
      <description>iOS 组件化初试-基于码云创建私有库 iOS组件的实现基本是基于cocoapods，如何利用cocoapod创建我们自己的私有库，是实现组件话的第一步，下边步骤中，我们将利用码云的仓库创建私有库来呈现私有库的创建过程。 此文使用 码云 做私有库存储，也可以使用公司 自己服务器 存储私有库，步骤是</description>
    </item>
    
    <item>
      <title>王道计算机网络笔记</title>
      <link>https://zhangxiongfeiv.github.io/post/%E7%8E%8B%E9%81%93%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sat, 02 May 2020 18:01:04 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E7%8E%8B%E9%81%93%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>计算机网络的概念 计算机网络:是一个将分散的，具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。 计算机网络是互连的，自治的计算机集合。 互联是指互相连通，通信链路 自治是指无主从关系 计算机网络的功能 数据通信 资源共享 (硬件 如打印机。 软件。</description>
    </item>
    
    <item>
      <title>王道操作系统笔记</title>
      <link>https://zhangxiongfeiv.github.io/post/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 02 May 2020 11:04:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E7%8E%8B%E9%81%93%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>操作系统 2020.5.2概念(定义) 操作系统（Operating System, OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其它软件方便的接口和环境，它是计算机系统最基本的系统软件。 功能和目标 补充知识： 进程是一个程序的执行过程。 执</description>
    </item>
    
    <item>
      <title>王道数据结构笔记</title>
      <link>https://zhangxiongfeiv.github.io/post/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 02 May 2020 08:36:02 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</guid>
      <description>2020.5.2日记录[TOC] 数据结构在学什么？ 如何用程序代码把现实世界的问题信息话 如何用计算机高效的处理这些信息从而创造价值 数据结构的基本概念 数据：数据是信息的载体，是描述客观事物属性的数，字符以及所有能输入到计算机中能被计算机程序识别和处理的符号的集合。 数据时计算机程序加工</description>
    </item>
    
    <item>
      <title>803计算机学科基础综合</title>
      <link>https://zhangxiongfeiv.github.io/post/803%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88/</link>
      <pubDate>Thu, 30 Apr 2020 18:09:56 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/803%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88/</guid>
      <description>一、 考查目标 计算机学科基础综合考试涵盖数据结构、计算机组成原理、操作系统和计算机网络等学科专业基础课程。要求考生比较系统地掌握上述专业基础课程的基本概念、基本原理和基本方法，能够综合运用所学的基本原理和基本方法分析、判断和解决有关理论问题和实际问题。 二、考试形式和试卷结构 1、试卷</description>
    </item>
    
    <item>
      <title>愿北邮成为我邮</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%84%BF%E5%8C%97%E9%82%AE%E6%88%90%E4%B8%BA%E6%88%91%E9%82%AE/</link>
      <pubDate>Thu, 30 Apr 2020 17:57:19 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%84%BF%E5%8C%97%E9%82%AE%E6%88%90%E4%B8%BA%E6%88%91%E9%82%AE/</guid>
      <description>愿北邮成为我邮 琢磨了好几年的考研，因为张清妍的到来，显得更加紧迫了，以后时间越来越少，精力也逐渐不如以前。遂决定，不再拖，今年考研！ 仅以此文鞭挞自己，望能坚持学习，更新学习计划，学习进度。尽人事，而后听天命。 目标： 北京邮电大学 网络空间安全学院 考试科目： 101思想政治理论 / 201英</description>
    </item>
    
    <item>
      <title>最大子序和DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8CDP/</link>
      <pubDate>Tue, 28 Apr 2020 20:56:35 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8CDP/</guid>
      <description>53. 最大子序和 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 示例: 输入: [-2,1,-3,4,-1,2,1,-5,4], 输出: 6 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。 进阶: 如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。 来源：力扣（LeetCode） 链接：https://</description>
    </item>
    
    <item>
      <title>最长公共子序列DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97DP/</link>
      <pubDate>Tue, 28 Apr 2020 18:10:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97DP/</guid>
      <description>1143. 最长公共子序列 给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。 一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。 例如，&amp;ldquo;ace&amp;rdquo; 是 &amp;ldquo;abcde&amp;rdquo; 的子序列，</description>
    </item>
    
    <item>
      <title>三角形最小路径和DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8CDP/</link>
      <pubDate>Tue, 28 Apr 2020 14:27:19 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8CDP/</guid>
      <description>三角形最小路径和 给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。 例如，给定三角形： [ [2], [3,4], [6,5,7], [4,1,8,3] ] 自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。 说明： 如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。 来源</description>
    </item>
    
    <item>
      <title>最长上升子序列DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97DP/</link>
      <pubDate>Tue, 28 Apr 2020 11:25:21 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97DP/</guid>
      <description>300. 最长上升子序列 给定一个无序的整数数组，找到其中最长上升子序列的长度。 示例: 输入: [10,9,2,5,3,7,101,18] 输出: 4 解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。 说明: 可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。 你算法的时间复杂度应该为 O(n2) 。 进阶: 你能将算法的时间复杂度降</description>
    </item>
    
    <item>
      <title>打家劫舍DPII</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DDPII/</link>
      <pubDate>Mon, 27 Apr 2020 22:08:29 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DDPII/</guid>
      <description>213. 打家劫舍 II 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 给定一个代表每个房屋存放金额的非</description>
    </item>
    
    <item>
      <title>打家劫舍DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DDP/</link>
      <pubDate>Mon, 27 Apr 2020 21:06:09 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DDP/</guid>
      <description>198. 打家劫舍 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到</description>
    </item>
    
    <item>
      <title>零钱找零DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%9B%B6%E9%92%B1%E6%89%BE%E9%9B%B6DP/</link>
      <pubDate>Mon, 27 Apr 2020 17:40:44 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%9B%B6%E9%92%B1%E6%89%BE%E9%9B%B6DP/</guid>
      <description>零钱兑换 给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。 示例 1: 输入: coins = [1, 2, 5], amount = 11 输出: 3 解释: 11 = 5 + 5 + 1 示例 2: 输入: coins = [2], amount = 3 输出: -1 来源：力扣（LeetCode） 链接：</description>
    </item>
    
    <item>
      <title>一文了解动态规划(Dynamic Programming)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 27 Apr 2020 10:20:11 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/</guid>
      <description>动态规划(Dynamic Programming) 简称 DP , 是求解最优化问题的一种常用策略。 来自维基百科的解释： Dynamic Programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once,and storing their solutions. 将复杂的原问题拆解成若干个简单的子问题 每个子问题只解决一次，并保存它们的解 最后推导出原问题的解 可以用动态规划来解决的问题，通常具备2个</description>
    </item>
    
    <item>
      <title>Hello,张清妍</title>
      <link>https://zhangxiongfeiv.github.io/post/Hello%E5%BC%A0%E6%B8%85%E5%A6%8D/</link>
      <pubDate>Sun, 26 Apr 2020 16:15:11 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/Hello%E5%BC%A0%E6%B8%85%E5%A6%8D/</guid>
      <description>Hello, 张清妍 地点：北京天坛医院 2020年4月16日 医生检查我们嘟嘟生长受限，决定提前生产，早上vv做了otc检查，用来判断是否符合顺产的条件，otc顺利通过，下午开始打催产素，然而直到打完，孩他妈仍然没有要生产的感觉，以为着急的嘟嘟下午就要个我们见面，结果可能又要等到今晚或者明天。 妈</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 26 Apr 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>一 树形结构： 数据结构分为线性结构和树形结构，如下图： 线性结构： 树形结构： 生活中的树形结构 二 树(Tree)的基本概念 节点，父节点，子节点，跟节点，兄弟节点 一棵树可以没有任何节点，成为空树 一棵树可以只有一个节点，也就是跟节点 子树，左子树，右子树 节点的度：子树的个数 树的度：所有接点度中</description>
    </item>
    
    <item>
      <title>队列刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%98%9F%E5%88%97%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 25 Apr 2020 18:25:18 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%98%9F%E5%88%97%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>队列 一，定义 队列是一种特殊的线性表，只能在头尾两端进行操作 队尾(rear) : 只能从队尾添加元素，一般叫做enQueue,入队 对头(front) : 只能从对头移除元素，一般叫做deQueue,出队 先进先出的原则，First In First Out，FIFO 二，内部实现 队列的内部实现是否可以直接利用</description>
    </item>
    
    <item>
      <title>集合刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%9B%86%E5%90%88/</link>
      <pubDate>Wed, 15 Apr 2020 22:20:03 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%9B%86%E5%90%88/</guid>
      <description>集合（Set） 集合的定义： 由一个或者多个确定的元素所构成的整体。 特点： 1，不存在重复元素 2，一般用于去重（比如一本书中统计词汇，统计访问网站的ip） 实现： 可使用动态数组，链表，二叉搜索树等实现集合。 ListSet(使用链表) TreeSet(使用红黑树) HashSet(哈希表) 复杂</description>
    </item>
    
    <item>
      <title>链表刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 14 Apr 2020 20:33:49 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%93%BE%E8%A1%A8/</guid>
      <description>链表(Linked List) 动态数组有个明显的缺点，可能会造成内存空间浪费。 链表可以做到用多少就申请多少内存。 链表是一种链式存储的线性表，所有元素的内存地址不一定是连续的。 练习题 237. 删除链表中的节点 请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。 现</description>
    </item>
    
    <item>
      <title>数组刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E7%BB%84%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 11 Apr 2020 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E7%BB%84%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>1. 两数之和 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 来源：力扣（LeetC</description>
    </item>
    
    <item>
      <title>栈刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%A0%88/</link>
      <pubDate>Sat, 11 Apr 2020 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%A0%88/</guid>
      <description>栈 栈是一种特殊的线性表,只能在一端操作 往栈中添加元素的操作，一般叫做push，入栈 从栈中移除元素的操作，一般叫做pop，出栈（只能移除栈顶元素，也叫做弹出栈顶元素） 后进先出的原则，Last In First Out, LIFO 练习题 20. 有效的括号 给定一个只包括 &amp;lsquo;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，</description>
    </item>
    
    <item>
      <title>数据结构学习 --&gt; 算法评判标准</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Wed, 08 Apr 2020 17:33:35 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>首先看一到leetcode题目:斐波那契数列。 509. 斐波那契数 斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), 其中 N &amp;gt; 1. 给定 N，计算 F(N)。 来源：力扣（LeetCode） 链接：ht</description>
    </item>
    
    <item>
      <title>字符串常用算法 --&gt; 滑动窗口</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Mon, 06 Apr 2020 21:16:57 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid>
      <description>字符串算法之滑动窗口 题目 3. 无重复字符的最长子串 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 示例 1: 输入: &amp;ldquo;abcabcbb&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。 示例 2: 输入: &amp;ldquo;bbbbb&amp;rdquo; 输出: 1 解释: 因为无重复字符的最长子串是 &amp;ldquo;</description>
    </item>
    
    <item>
      <title>字符串常用算法 --&gt; 双指针</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 05 Apr 2019 20:52:54 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description>151. 翻转字符串里的单词 题目 给定一个字符串，逐个反转字符串中的每个单词 示例 1： 输入: &amp;quot;the sky is blue&amp;quot; 输出: &amp;quot;blue is sky the&amp;quot; 说明： 无空格字符构成一个单词。 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 解题思路 1,采</description>
    </item>
    
    <item>
      <title>NSObject内存结构</title>
      <link>https://zhangxiongfeiv.github.io/post/NSObject%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 25 Jun 2018 17:24:50 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/NSObject%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>一，Objective-C的本质 我们平时编写的Objective-C代码，底层实现都是C/C++代码。 所以Objective-C的面向对象，都是通过C/C++的数据结构实现的。 Objective-C的对象，是用C++中的结构体来实现的。 二，猜测 接下来我们通过代码来验证下OC对象的</description>
    </item>
    
    <item>
      <title>Hugo基本使用</title>
      <link>https://zhangxiongfeiv.github.io/post/hugo/</link>
      <pubDate>Mon, 06 Mar 2017 14:04:58 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/hugo/</guid>
      <description>Mac环境下安装Hugo 第一步：安装hugo mac环境下用homebrew工具安装hugo，一句命令即可 $ brew install hugo 第二步：生成站点 利用brew生成站点，(比如生成在myblog目录下)执行如下命令 $ hugo new site myblog 第三步：创建文章 创建的文章一般放在post下， 方便之后聚合生成页面。 $ hugo new p</description>
    </item>
    
  </channel>
</rss>