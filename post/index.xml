<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 飞熊&#39;s Blogs</title>
    <link>https://zhangxiongfeiv.github.io/post/</link>
    <description>Recent content in Posts on 飞熊&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Jun 2020 17:47:03 +0800</lastBuildDate>
    
	<atom:link href="https://zhangxiongfeiv.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode200题回顾与总结</title>
      <link>https://zhangxiongfeiv.github.io/post/leetcode200%E9%A2%98%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Thu, 28 May 2020 10:09:44 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/leetcode200%E9%A2%98%E5%9B%9E%E9%A1%BE/</guid>
      <description>2020.5.27总结 截止 5.27日，leetcode总刷题数到达200，写一篇文章以回顾，总结。 起因 非计算机专业出身的程序员, 经历过很多因</description>
    </item>
    
    <item>
      <title>503.下一个更大元素II</title>
      <link>https://zhangxiongfeiv.github.io/post/503.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0ii/</link>
      <pubDate>Thu, 11 Jun 2020 17:47:03 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/503.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0ii/</guid>
      <description>503. 下一个更大元素 II 给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按</description>
    </item>
    
    <item>
      <title>单调栈解决Next Great Element问题</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%8D%95%E8%B0%83%E6%A0%88%E8%A7%A3%E5%86%B3next-great-element%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 11 Jun 2020 17:03:20 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%8D%95%E8%B0%83%E6%A0%88%E8%A7%A3%E5%86%B3next-great-element%E9%97%AE%E9%A2%98/</guid>
      <description>单调栈 栈(stack) 是一种特殊的线性表，只能在一端进行操作。 往栈中添加元素，叫做push，入栈 从栈中移除元素，叫做pop，出栈 后进先出的原</description>
    </item>
    
    <item>
      <title>496.下一个更大元素I</title>
      <link>https://zhangxiongfeiv.github.io/post/496.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0i/</link>
      <pubDate>Thu, 11 Jun 2020 17:00:52 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/496.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0i/</guid>
      <description>496. 下一个更大元素 I 给定两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。 nums1 中数字 x 的下一个更</description>
    </item>
    
    <item>
      <title>739.每日温度</title>
      <link>https://zhangxiongfeiv.github.io/post/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</link>
      <pubDate>Thu, 11 Jun 2020 13:14:14 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</guid>
      <description>739. 每日温度 根据每日 气温 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0</description>
    </item>
    
    <item>
      <title>递归-汉诺塔问题</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%80%92%E5%BD%92-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jun 2020 16:40:17 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%80%92%E5%BD%92-%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</guid>
      <description>面试题 08.06. 汉诺塔问题 在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第</description>
    </item>
    
    <item>
      <title>简单了解递归</title>
      <link>https://zhangxiongfeiv.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E9%80%92%E5%BD%92/</link>
      <pubDate>Wed, 10 Jun 2020 12:26:51 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E9%80%92%E5%BD%92/</guid>
      <description>递归(Recursion) 定义： 函数自身直接或间接调用自身，是一种常用的变成技巧。 生活中的递归现象： 从前有座山，山里有座庙，庙里有个老和尚，</description>
    </item>
    
    <item>
      <title>面试题46.把数字翻译成字符串</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%9846.%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 09 Jun 2020 23:01:15 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%9846.%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>面试题46.把数字翻译成字符串 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，</description>
    </item>
    
    <item>
      <title>Charles为什么能抓https?</title>
      <link>https://zhangxiongfeiv.github.io/post/charles%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8A%93https/</link>
      <pubDate>Tue, 09 Jun 2020 10:36:04 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/charles%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%8A%93https/</guid>
      <description>经历 曾经去某公司ms, 公司名称就不透露了， 面试官问到，Charles为什么能抓https? 当时没回答上来。一年半以后，终于把有关https 加</description>
    </item>
    
    <item>
      <title>Https为什么是安全的？</title>
      <link>https://zhangxiongfeiv.github.io/post/https%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%89%E5%85%A8%E7%9A%84/</link>
      <pubDate>Mon, 08 Jun 2020 15:50:47 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/https%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%89%E5%85%A8%E7%9A%84/</guid>
      <description>姐妹篇 简单了解对称和非对称加密 单向散列函数 数字签名 CA数字证书 HTTPS HTTP 有以下安全性问题： 使用明文进行通信， 内容可能会被窃听 不验证通信方的身份，通</description>
    </item>
    
    <item>
      <title>简单了解并查集</title>
      <link>https://zhangxiongfeiv.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Mon, 08 Jun 2020 13:55:31 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>需求分析 假设有 N 个村庄, 有些村庄之间有连接的路，有些村庄之间没有连接的路 设计一个数据结构，能够快速执行两个操作 查询两个村庄之间是否有连接的路</description>
    </item>
    
    <item>
      <title>剑指offe21.调整数组顺序使奇数位于偶数前面</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offe21.%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</link>
      <pubDate>Sat, 06 Jun 2020 21:31:33 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offe21.%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</guid>
      <description>面试题21. 调整数组顺序使奇数位于偶数前面 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位</description>
    </item>
    
    <item>
      <title>团灭两数之和问题</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%9B%A2%E7%81%AD%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 06 Jun 2020 11:13:38 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%9B%A2%E7%81%AD%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/</guid>
      <description>1. 两数之和 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会</description>
    </item>
    
    <item>
      <title>404.左叶子和</title>
      <link>https://zhangxiongfeiv.github.io/post/404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E5%92%8C/</link>
      <pubDate>Sat, 06 Jun 2020 01:06:51 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E5%92%8C/</guid>
      <description>404. 左叶子之和 计算给定二叉树的所有左叶子之和。 示例： ​ 3 / 9 20 / 15 7 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24 来源：力扣（Lee</description>
    </item>
    
    <item>
      <title>iOS签名机制</title>
      <link>https://zhangxiongfeiv.github.io/post/ios%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 05 Jun 2020 23:26:21 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/ios%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6/</guid>
      <description>姐妹篇 简单了解对称和非对称加密 单向散列函数 数字签名 CA数字证书 iOS签名机制 iOS签名机制的作用 保证安装到用户手机上的APP都是经过Appl</description>
    </item>
    
    <item>
      <title>剑指offer53.0-n-1中缺失的数字</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offer53.%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 05 Jun 2020 15:45:25 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%89%91%E6%8C%87offer53.%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>面试题53 - II. 0～n-1中缺失的数字 一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-</description>
    </item>
    
    <item>
      <title>278.寻找重复数</title>
      <link>https://zhangxiongfeiv.github.io/post/278.%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</link>
      <pubDate>Fri, 05 Jun 2020 12:55:09 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/278.%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</guid>
      <description>287. 寻找重复数 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，</description>
    </item>
    
    <item>
      <title>CA数字证书</title>
      <link>https://zhangxiongfeiv.github.io/post/ca%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Fri, 05 Jun 2020 01:51:42 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/ca%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</guid>
      <description>证书 证书，联想的是驾驶证、毕业证、英语四六级证等等，都是由权威机构认证的 密码学中的证书，全称叫公钥证书（Public-key Certific</description>
    </item>
    
    <item>
      <title>数字签名</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Fri, 05 Jun 2020 01:01:20 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</guid>
      <description>想象以下场景 Alice发的内容有可能是被篡改的，或者有人伪装成Alice发消息，或者就是Alice发的，但她可以否认 问题来了：Bob如何确定</description>
    </item>
    
    <item>
      <title>单向散列函数</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 04 Jun 2020 23:42:03 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</guid>
      <description>单向散列函数(One-way hash function) 概念 单向散列函数，又被称为消息摘要函数（message digest function），哈希函数 输出的散列值，也被称为消</description>
    </item>
    
  </channel>
</rss>