<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 张雄飞</title>
    <link>https://zhangxiongfeiv.github.io/post/</link>
    <description>Recent content in Posts on 张雄飞</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Apr 2020 11:25:21 +0800</lastBuildDate>
    
	<atom:link href="https://zhangxiongfeiv.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>最长上升子序列DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97dp/</link>
      <pubDate>Tue, 28 Apr 2020 11:25:21 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97dp/</guid>
      <description>300. 最长上升子序列  给定一个无序的整数数组，找到其中最长上升子序列的长度。
示例:
输入: [10,9,2,5,3,7,101,18] 输出: 4 解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。 说明:
可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。 你算法的时间复杂度应该为 O(n2) 。 进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-increasing-subsequence 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 题解： 此题使用动态规划解题方法
  定义状态 dp[i]代表以 第i个元素结尾的序列 的最长上升子序列
  定义初始值 第一位时, 最长上升子序列为1
  定义状态转移方程。 计算dp[i] 时, 将其与前边元素比较， 当比前边元素大时，则取出当前对应的dp值+1就是dp[i].
  用max记录，所有dp数组中的最大值。
  代码如下： public int lengthOfLIS(int[] nums) { if (nums == null || nums.length == 0) return 0; // 定义状态 dp[i]代表以 第i个元素结尾的序列 的最长上升子序列  int[] dp = new int[nums.</description>
    </item>
    
    <item>
      <title>打家劫舍DPII</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddpii/</link>
      <pubDate>Mon, 27 Apr 2020 22:08:29 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddpii/</guid>
      <description>213. 打家劫舍 II  你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1:
输入: [2,3,2] 输出: 3 解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。 示例 2:
输入: [1,2,3,1] 输出: 4 解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。 偷窃到的最高金额 = 1 + 3 = 4 。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/house-robber-ii 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 题解： 此题采用动态规划的思想，与198打家劫舍dp类似，不同之处在于本题房屋是围成一个圈，198是一条直线。 所以这道题需要考虑第一个房屋和最后一个房屋不能同时抢劫。
故用这种思路解题，或者抢劫 0-nums.length-1范围的房屋，或者抢劫 1-nums.length范围的房屋。 两者之间的最大者，就是题目的解。
代码如下： public static int rob(int[] nums) { if (nums == null || nums.</description>
    </item>
    
    <item>
      <title>打家劫舍DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddp/</link>
      <pubDate>Mon, 27 Apr 2020 21:06:09 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Ddp/</guid>
      <description>198. 打家劫舍  你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1:
输入: [1,2,3,1] 输出: 4 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。 偷窃到的最高金额 = 1 + 3 = 4 。 示例 2:
输入: [2,7,9,3,1] 输出: 12 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。 偷窃到的最高金额 = 2 + 9 + 1 = 12 。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/house-robber 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 题解： 此题目使用动态规划的解题方法，动态规划三步骤分别为：</description>
    </item>
    
    <item>
      <title>零钱找零DP</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%9B%B6%E9%92%B1%E6%89%BE%E9%9B%B6dp/</link>
      <pubDate>Mon, 27 Apr 2020 17:40:44 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%9B%B6%E9%92%B1%E6%89%BE%E9%9B%B6dp/</guid>
      <description>零钱兑换   给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
示例 1:
输入: coins = [1, 2, 5], amount = 11 输出: 3 解释: 11 = 5 + 5 + 1 示例 2:
输入: coins = [2], amount = 3 输出: -1
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/coin-change 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 思路一：暴力递归 假设coins数组中包含1 5 20 25四种硬币，则amout个硬币所需的最小硬币个数为 amount-1, amount - 5, amout - 20, amount - 25中最小硬币个数再 +1。 自顶向下调用，出现了重叠子问题。 代码如下：
static int coinChange(int n) { if (n &amp;lt; 1) return Integer.</description>
    </item>
    
    <item>
      <title>一文了解动态规划(Dynamic Programming)</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 27 Apr 2020 10:20:11 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/</guid>
      <description>动态规划(Dynamic Programming) 简称 DP , 是求解最优化问题的一种常用策略。
来自维基百科的解释：
 Dynamic Programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once,and storing their solutions.
  将复杂的原问题拆解成若干个简单的子问题 每个子问题只解决一次，并保存它们的解 最后推导出原问题的解  可以用动态规划来解决的问题，通常具备2个特点  最有子结构（最优化原理）：通过求解子问题的最优解，可以获得原问题的最优解。 无后效行  某阶段的状态一旦确定，则伺候过程的演变不再受此前各状态及决策的影响（未来与过去无关） 在推倒后边阶段的状态时，只关心前面阶段的具体状态值，不关心这个状态怎么一步步推导出来的    动态规划的常规步骤：   定义状态（状态是原问题，子问题的解）比如定义dp[i]的含义
  设置初始状态（边界） 比如设置dp[0]的值
  确定状态转移方程 比如确定dp[i] 和 dp[i-1]的关系
  通用的使用套路（一步步优化）  暴力递归（自顶向下，出现了重复计算） 记忆化搜索（自顶向下） 递推（自底向下）  以下练习题整理转载自 力扣上的 DP 问题分类汇总</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 26 Apr 2020 10:15:13 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>一 树形结构： 数据结构分为线性结构和树形结构，如下图：
 线性结构：   树形结构：    生活中的树形结构
  二 树(Tree)的基本概念   节点，父节点，子节点，跟节点，兄弟节点
  一棵树可以没有任何节点，成为空树
  一棵树可以只有一个节点，也就是跟节点
  子树，左子树，右子树
  节点的度：子树的个数
  树的度：所有接点度中的最大值
  叶子节点leaf：度为0的节点
  非叶子节点： 度不为0的节点
  层数：根节点在第一层，根节点的字节点在第二层，以此类推
  节点的深度：从根节点到当前节点的节点总数
  节点的高度：从当前节点到最远叶子节点的路径上的节点总数
  树的深度：所有节点深度中的最大值
  树的高度：所有节点高度中的最大值
  树的深度等于树的高度
  有序树，无序树，森林  有序树：树中任意节点的字节点有顺序关系 无序树：树中任意节点的字节点没有顺序关系，也成为自由树 森林：由m(m &amp;gt;= 0) 棵互不相交的树组成的集合  二叉树（Binary Tree） 二叉树的特点：  每个节点的度最大为2（最多拥有两棵子树） 左子树和右子树是有顺序的 即使某一节点只有一棵树，也要区分左右子树 有序树  二叉树的性质：   非空二叉树，第i层最多有 (2 ^ （i-1）)个节点</description>
    </item>
    
    <item>
      <title>队列刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%98%9F%E5%88%97%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 25 Apr 2020 18:25:18 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%98%9F%E5%88%97%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>队列 一，定义 队列是一种特殊的线性表，只能在头尾两端进行操作
  队尾(rear) : 只能从队尾添加元素，一般叫做enQueue,入队
  对头(front) : 只能从对头移除元素，一般叫做deQueue,出队
  先进先出的原则，First In First Out，FIFO
  二，内部实现 队列的内部实现是否可以直接利用以前用过的数据结构？
 动态数组，链表 优先使用双向链表，因为队列主要网头尾操作元素  三，几种特殊队列 双端队列 双端队列是能在头尾两端添加，删除的队列
英文名Deque, 是double ended queue的简称
循环队列 其实队列底层也可以用动态数组实现，并且各项接口也可以优化到O(1)的时间复杂度
这个用数组实现并且优化之后的队列也叫做，循环队列
循环双端队列：可以进行两端添加，删除操作的循环队列。
四，题目 225. 用队列实现栈  使用队列实现栈的下列操作：
push(x) &amp;ndash; 元素 x 入栈 pop() &amp;ndash; 移除栈顶元素 top() &amp;ndash; 获取栈顶元素 empty() &amp;ndash; 返回栈是否为空 注意:
你只能使用队列的基本操作&amp;ndash; 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。 你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。 你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</description>
    </item>
    
    <item>
      <title>集合刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%9B%86%E5%90%88/</link>
      <pubDate>Wed, 15 Apr 2020 22:20:03 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%9B%86%E5%90%88/</guid>
      <description>集合（Set） 集合的定义： 由一个或者多个确定的元素所构成的整体。
特点： 1，不存在重复元素
2，一般用于去重（比如一本书中统计词汇，统计访问网站的ip）
实现： 可使用动态数组，链表，二叉搜索树等实现集合。
ListSet(使用链表) TreeSet(使用红黑树) HashSet(哈希表)
复杂度分析： TreeSet： 添加，删除，查找时间复杂度都是 O(logN)
ListSet ： 添加，删除，查找时间复杂度都是O(logN)
HashSet: 添加，删除，查找时间复杂度都是O(logN)
TreeMap局限性： 元素必须具备可比较性，如果没有可比较性， 无法使用TreeMap。因为二叉搜索树中的元素必须具备可比较性。
练习题 349. 两个数组的交集  给定两个数组，编写一个函数来计算它们的交集。
示例 1:
输入: nums1 = [1,2,2,1], nums2 = [2,2] 输出: [2] 示例 2:
输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4] 输出: [9,4] 说明:
输出结果中的每个元素一定是唯一的。 我们可以不考虑输出结果的顺序。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/intersection-of-two-arrays 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 题解： 把第一个数组依次加入firSet去重，第二个数组也依次加入secSet中去重复，遍历secSet如果firSet中包含，则加入结果数组中。
代码如下:
public int[] intersection(int[] nums1, int[] nums2){ HashSet set = new HashSet(); for (int i = 0; i &amp;lt; nums1.</description>
    </item>
    
    <item>
      <title>链表刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 14 Apr 2020 20:33:49 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E9%93%BE%E8%A1%A8/</guid>
      <description>链表(Linked List)
动态数组有个明显的缺点，可能会造成内存空间浪费。 链表可以做到用多少就申请多少内存。
链表是一种链式存储的线性表，所有元素的内存地址不一定是连续的。
练习题 237. 删除链表中的节点  请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。
现有一个链表 &amp;ndash; head = [4,5,1,9]，它可以表示为:
示例 1:
输入: head = [4,5,1,9], node = 5 输出: [4,1,9] 解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9. 示例 2:
输入: head = [4,5,1,9], node = 1 输出: [4,5,9] 解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 5 -&amp;gt; 9.
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/delete-node-in-a-linked-list 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 题解 删除一个链表中的节点， 最常见的方式是拿到前一个节点prev， 把prev的next指针指向当前元素node的下一个元素。
此题中，我们拿不到prev，所以把node的val替换为next的val， 并把node的next指向，node.next.next;
代码如下
public void deleteNode(ListNode node) { node.</description>
    </item>
    
    <item>
      <title>数组刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E7%BB%84%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 11 Apr 2020 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%95%B0%E7%BB%84%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>1. 两数之和  给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/two-sum 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 解题方法 思路一 ： 暴力法 暴力法非常简单， 从首元素开始依次扫描，记录下此元素与target的差值，往后遍历，之后元素与target一致时，返回元素下标。
时间复杂度：O（N ^ 2）,空间复杂度(O(1))
思路二 ：两遍哈希表 二次迭代，第一遍迭代先把index 和 与target的差值存入map， 第二次迭代检查每个元素对应的差值，是否存在map中。有则返回下标。
时间复杂度：O（N ）,空间复杂度(O(N))
思路三 ：一遍哈希表 一次迭代，迭代时判断map的key中是否存在nums[i], 如果存在，则返回i 和 map.get[nums[i]], 不存在则把map中存放(target - nums[i], i).
时间复杂度：O（N ）,空间复杂度(O(N))
代码如下 public int[] twoSum(int[] nums, int target) { HashMap&amp;lt;Integer,Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>栈刷题记录</title>
      <link>https://zhangxiongfeiv.github.io/post/%E6%A0%88/</link>
      <pubDate>Sat, 11 Apr 2020 11:25:40 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E6%A0%88/</guid>
      <description>栈 栈是一种特殊的线性表,只能在一端操作
往栈中添加元素的操作，一般叫做push，入栈
从栈中移除元素的操作，一般叫做pop，出栈（只能移除栈顶元素，也叫做弹出栈顶元素）
后进先出的原则，Last In First Out, LIFO
练习题 20. 有效的括号  给定一个只包括 &amp;lsquo;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&amp;rsquo; 的字符串，判断字符串是否有效。
有效字符串需满足：
左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。
示例 1:
输入: &amp;ldquo;()&amp;rdquo; 输出: true
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/valid-parentheses 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 题解： 这道题使用栈数据结构。
1，左括号时，入栈，
2，右括号时，如果栈顶是与其对应的左括号， 则出栈。如果不对应，则返回false。
3，最终返回结果是栈是否为空
代码如下： private static HashMap&amp;lt;Character,Character&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); static { map.put(&amp;#39;(&amp;#39;,&amp;#39;)&amp;#39;); map.put(&amp;#39;[&amp;#39;,&amp;#39;]&amp;#39;); map.put(&amp;#39;{&amp;#39;,&amp;#39;}&amp;#39;); } public boolean isValid(String s) { Stack stack = new Stack(); for (int i = 0; i &amp;lt; s.length(); i++) { char c = s.</description>
    </item>
    
    <item>
      <title>数据结构学习 --&gt; 算法评判标准</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Wed, 08 Apr 2020 17:33:35 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>首先看一到leetcode题目:斐波那契数列。
509. 斐波那契数  斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：
F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), 其中 N &amp;gt; 1. 给定 N，计算 F(N)。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/fibonacci-number 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 解法一 : 本题非常明显可以通过递归来解决，代码如下
public int fib(int n){ if(n &amp;lt;= 1) return n; return fib(n-1) + fib(n-2) } 但是这种方式在代码提交后，测试用例43超时，而题目给出的要求是[0,100]之内的数字,很明显算法需要优化。算法时间复杂度为O(2 ^ n), 空间复杂度为O(1).
接下来，我们尝试换一种算法解题
解法二 : 动态规划思想,利用dp数组存放每一位上斐波那契数列的值。
步骤： 1，定义初始化状态. dp[0] = 0; dp[1] = 1;</description>
    </item>
    
    <item>
      <title>字符串常用算法 --&gt; 滑动窗口</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Mon, 06 Apr 2020 21:16:57 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid>
      <description>字符串算法之滑动窗口 题目 3. 无重复字符的最长子串  给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
示例 1:
输入: &amp;ldquo;abcabcbb&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。 示例 2:
输入: &amp;ldquo;bbbbb&amp;rdquo; 输出: 1 解释: 因为无重复字符的最长子串是 &amp;ldquo;b&amp;rdquo;，所以其长度为 1。 示例 3:
输入: &amp;ldquo;pwwkew&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;wke&amp;rdquo;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，&amp;ldquo;pwke&amp;rdquo; 是一个子序列，不是子串。
 解题思路 此题采用滑动窗口解题方法，将一个hashmap作为窗口，map中key，value分别为，字符和字符所在的index。
两个指针，left指针是便利时不重复字串的起点。 i指针是当前遍历的index。
max用来存储最终结果，即无重复字串的长度。
一遍循环，循环时有如下情况：
1，当map的key中不包含当前遍历的字符时，将其加入窗口中（即加入map中，设置map的key为当前字符，value为当前index）。
2，当map中的key包含当前遍历的字符时，滑动窗口滑动至包含字符对应value（即index）的下一个,并且需要将left到index之间的key清除掉。 然后其加入窗口中。
3，上述两种情况都分别计算，当前不重复字串的长度。 max = Math.max(max, i - left + 1);
代码如下 public static int lengthOfLongestSubstring(String s) { if (s == null || s.</description>
    </item>
    
    <item>
      <title>字符串常用算法 --&gt; 双指针</title>
      <link>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 05 Apr 2019 20:52:54 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description>151. 翻转字符串里的单词 题目 给定一个字符串，逐个反转字符串中的每个单词
示例 1：
输入: &amp;quot;the sky is blue&amp;quot; 输出: &amp;quot;blue is sky the&amp;quot; 说明：
无空格字符构成一个单词。 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
解题思路 1,采取双指针方法, 去除多余的空格
3,有效字符串整体反转
4.反转以后， 再逐个反转每个单词
示例代码 public static String reverseWords(String s) { if (s == null) return s; // cur 指针指向当前重组后的字符串当前的index  int cur = 0; // len 代表重组后的字符串的有效长度  int len = 0; char[] chars = s.toCharArray(); // 上一个是否是空格，如果是空格，则下次进入空格时 cur不加加  boolean prevIsSpace = true; for (int i = 0; i &amp;lt; chars.</description>
    </item>
    
    <item>
      <title>NSObject内存结构</title>
      <link>https://zhangxiongfeiv.github.io/post/nsobject%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 25 Jun 2018 17:24:50 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/nsobject%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>一，Objective-C的本质 我们平时编写的Objective-C代码，底层实现都是C/C++代码。
所以Objective-C的面向对象，都是通过C/C++的数据结构实现的。
Objective-C的对象，是用C++中的结构体来实现的。
二，猜测 接下来我们通过代码来验证下OC对象的本质。OC代码如下：
#import &amp;lt;Foundation/Foundation.h&amp;gt; int main(int argc, const char * argv[]) { @autoreleasepool { NSObject *objc = [[NSObject alloc] init]; NSLog(@&amp;#34;Hello, World!&amp;#34;); } return 0; } 我们使用命令行工具将一下代码转化为C++代码，命令如下：
clang -rewrite-objc main.m -o main.cpp 我们可以指定架构，命令如下：
xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp 生成 main-arm64.cpp 接下来，我们在main-arm64.cpp文件中，探索NSObject对象的本质，可以找到NSObject_IMPL(即NSObject对象转化为C++后的实现)
struct NSObject_IMPL { Class isa; }; // 查看Class本质 typedef struct objc_class *Class; 我们发现Class其实就是一个指针，对象底层实现其实就是这个样子。 通过以上代码，发现NSObject对象转换为结构体后，结构体成员中只有一个isa指针，指针在arm64架构下，大小为8个字节，在32位下是4个字节，也就是说一个NSObject对象在64位所占用的内存空间为8个字节，32位下是4个字节。
三，验证 1，代码层次： 我们通过class_getInstanceSize()来打印NSObject对象的大小，代码如下：
#import &amp;lt;Foundation/Foundation.h&amp;gt; #import &amp;lt;objc/runtime.</description>
    </item>
    
    <item>
      <title>Hugo基本使用</title>
      <link>https://zhangxiongfeiv.github.io/post/hugo/</link>
      <pubDate>Mon, 06 Mar 2017 14:04:58 +0800</pubDate>
      
      <guid>https://zhangxiongfeiv.github.io/post/hugo/</guid>
      <description>Mac环境下安装Hugo 第一步：安装hugo mac环境下用homebrew工具安装hugo，一句命令即可
$ brew install hugo 第二步：生成站点 利用brew生成站点，(比如生成在myblog目录下)执行如下命令
$ hugo new site myblog 第三步：创建文章 创建的文章一般放在post下， 方便之后聚合生成页面。
$ hugo new post/文章名称.md 文章内容为MArkDown格式，可用vim命令编辑，亦可以其他编辑器如Typora等编辑。
第四步：安装主题 去官网找喜欢的主题，本文以Tailwind Journal为例。
找到其github地址，将其克隆到Themes/目录下
$ cd Themes $ git clone https://github.com/ianrodrigues/hugo-tailwind-journal.git 第五步：运行站点 在myblog目录下，执行一下命令
$ hugo server -t hugo-tailwind-journal —buildDrafts 运行站点后，可以在本地测试 http://localhost:1313
第六步：部署到Github公网 1，首先在Github上创建一个仓库， 这里⚠️注意仓库名称需要和Github用户名一致，并拼接上.github.io 后缀。如下图:
2，在站点根目录下，执行命令生成页面。
$ hugo --theme=hugo-tailwind-journal --baseUrl=&amp;quot;https://zhangxiongfeiv.github.io&amp;quot; --buildDrafts 3, 执行完毕，会生成public文件夹，所有的静态页面存放在此。将public目录下所有文件push到刚刚创建Git仓库master目录下。
$ cd public $ git init $ git remote add origin https://github.com/zhangxiongfeiv/zhangxiongfeiv.github.io.git $ git add .</description>
    </item>
    
  </channel>
</rss>